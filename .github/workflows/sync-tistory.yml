name: Tistory RSS Sync

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: pip install requests feedparser beautifulsoup4 markdownify
    - name: Sync Tistory RSS
      env:
        TISTORY_BLOG_NAME: ${{ secrets.TISTORY_BLOG_NAME }}
      run: |
        python -c "
        import requests, feedparser, markdownify, os, re
        from datetime import datetime
        from bs4 import BeautifulSoup
        
        blog = os.environ.get('TISTORY_BLOG_NAME', 'ib1k')
        feed = feedparser.parse(f'https://{blog}.tistory.com/rss')
        
        os.makedirs('_posts', exist_ok=True)
        
        for entry in feed.entries[:10]:
            try:
                resp = requests.get(entry.link, timeout=10)
                soup = BeautifulSoup(resp.content, 'html.parser')
                
                # 티스토리 본문 추출
                content_div = soup.find('div', class_='tt_article_useless_p_margin')
                if not content_div:
                    content_div = soup.select_one('[class*=\"entry-content\"]')
                if not content_div:
                    continue
                    
                markdown = markdownify.markdownify(str(content_div))
                
                # 파일명 생성
                date = datetime.strptime(entry.published, '%a, %d %b %Y %H:%M:%S %z')
                title = re.sub(r'[^\w\s-]', '', entry.title).strip()
                filename = f'{date.strftime(\"%Y-%m-%d\")}-{title.replace(\" \", \"-\")}.md'
                
                # 파일 저장
                filepath = f'_posts/{filename}'
                if not os.path.exists(filepath):
                    with open(filepath, 'w', encoding='utf-8') as f:
                        f.write(f'''---
f.write(f'''---
title: \"{entry.title}\"
date: {date.isoformat()}
original_url: {entry.link}
layout: post
---

{markdown}
''')
---

{markdown}
''')
                    print(f'✅ 저장: {entry.title}')
            except Exception as e:
                print(f'❌ 오류: {e}')
                continue
        print('🎉 RSS 동기화 완료')
        "
    - name: Commit changes
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add _posts/
        if ! git diff --cached --quiet; then
          git commit -m "📝 티스토리 RSS 자동 동기화: $(date '+%Y-%m-%d %H:%M')"
          git push
        else
          echo "변경사항 없음"
        fi
